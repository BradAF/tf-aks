# Official image for Hashicorp's Terraform. It uses light image which is Alpine
# based as it is much lighter.
#
# Entrypoint is also needed as image by default set `terraform` binary as an
# entrypoint.
image:
  name: hashicorp/terraform:light
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

# Default output file for Terraform plan
variables:
  PLAN: plan.tfplan
  TF_VAR_FILE: test.tf-test
  BUILD_PATH_BOOTSTRAP_AZURE_REMOTE_STATE: /builds/datadarius/tf-aks/bootstrap-azure-remote-state
  BUILD_PATH_AZURE_KUBERNETES_SERVICE: /builds/datadarius/tf-aks/terraform-azure-kubernetes-service

cache:
  paths:
    - .terraform

before_script:
  - export ARM_CLIENT_ID=$client_id && export ARM_CLIENT_SECRET=$client_secret && export ARM_TENANT_ID=$tenant_id && export ARM_SUBSCRIPTION_ID=$subscription_id

stages:
  - validate
  - docs
  - plan
  - apply
  - inspec_test
  - destroy

validate-bootstrap-azure-remote-state:
  stage: validate
  
  script:
    - cd $BUILD_PATH_BOOTSTRAP_AZURE_REMOTE_STATE
    - terraform init
    - terraform validate -var-file=$TF_VAR_FILE -input=false
  artifacts:
    name: terraformdata
    paths:
      - .terraform

plan-bootstrap-azure-remote-state:
  stage: plan
  dependencies:
    - validate-bootstrap-azure-remote-state
  script:
    - cd $BUILD_PATH_BOOTSTRAP_AZURE_REMOTE_STATE
    - terraform init
    - terraform plan -var-file=$TF_VAR_FILE -input=false -out=$PLAN
  artifacts:
    name: $PLAN
    paths:
      - $BUILD_PATH_BOOTSTRAP_AZURE_REMOTE_STATE
      - .terraform


apply-bootstrap-azure-remote-state:
  stage: apply
  dependencies:
    - plan-bootstrap-azure-remote-state
  script:
    - cd $BUILD_PATH_BOOTSTRAP_AZURE_REMOTE_STATE
    - terraform init
    - terraform apply -input=false $PLAN
    - terraform destroy -var-file=$TF_VAR_FILE -input=false -force
  only:
    - master

# inspec_test:
#   stage: inspec_test
#   script:
#     - 'echo gem: --no-document > $HOME/.gemrc'
#     - apk update
#     - apk add build-base git libffi-dev ruby-dev ruby-bundler
#     - gem install inspec
#     -  inspec exec my-profile -t azure://
#     - terraform destroy -input=false


validate-terraform-azure-kubernetes-service:
  stage: validate
  script:
    - cd $BUILD_PATH_AZURE_KUBERNETES_SERVICE
    - terraform init
    - terraform validate -var-file=$TF_VAR_FILE -var 'service_principal=$client_id' -var 'service_principal_secret=$client_secret' -input=false
  artifacts:
    name: terraformdata2
    paths:
      - .terraform

plan-terraform-azure-kubernetes-service:
  stage: plan
  dependencies:
    - validate-terraform-azure-kubernetes-service
  script:
    - cd $BUILD_PATH_AZURE_KUBERNETES_SERVICE
    - terraform init
    - terraform plan -var-file=$TF_VAR_FILE -var 'service_principal=$client_id' -var 'service_principal_secret=$client_secret' -input=false -out=$PLAN
  artifacts:
    name: PLAN
    paths:
      - $BUILD_PATH_AZURE_KUBERNETES_SERVICE
      - plan.tfplan

apply-terraform-azure-kubernetes-service:
  stage: apply
  dependencies:
    - plan-terraform-azure-kubernetes-service
  script:
    - cd $BUILD_PATH_AZURE_KUBERNETES_SERVICE
    - terraform init
    - terraform apply -input=false $PLAN
    - terraform destroy -var-file=$TF_VAR_FILE -var 'service_principal=$client_id' -var 'service_principal_secret=$client_secret' -input=false -force
  when: manual
  only:
    - master

terraform-docs:
  image: registry.gitlab.com/datadarius/docker-terraform-docs:latest
  stage: docs
  dependencies:
    - validate-terraform-azure-kubernetes-service
  script:
    - cd $BUILD_PATH_AZURE_KUBERNETES_SERVICE
    - terraform-docs md . > terraform-info.md
    - git add terraform-info.md && git commit terraform-info.md -m "adding terraform-docs for $CI_COMMIT_REF_SLUG"

  when: manual
  only:
    - master

# inspec_test:
#   stage: inspec_test
#   script:
#     - 'echo gem: --no-document > $HOME/.gemrc'
#     - apk update
#     - apk add build-base git libffi-dev ruby-dev ruby-bundler
#     - gem install inspec
#     -  inspec exec my-profile -t azure://
#     - terraform destroy -input=false
